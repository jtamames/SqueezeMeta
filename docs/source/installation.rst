************************
Installation and testing
************************

SqueezeMeta is intended to be run in a x86-64 Linux OS (tested in Ubuntu
and CentOS). The easiest way to install it is by using conda. The
default conda solver might however be slow solving the dependencies, so
it’s better to first set up the libmamba solver with

.. code-block:: console

   conda update -n base conda # if your conda version is below 22.11
   conda install -n base conda-libmamba-solver
   conda config --set solver libmamba

and then use conda to install SqueezeMeta

.. code-block:: console

   conda create -n SqueezeMeta -c conda-forge -c bioconda -c fpusan squeezemeta=1.7 --no-channel-priority --override-channels

This will create a new conda environment named SqueezeMeta, which must
then be activated.

.. code-block:: console

   conda activate SqueezeMeta

When using conda, all the scripts from the SqueezeMeta distribution will
be available on ``$PATH``.

Alternatively, you can download the latest release from the GitHub
repository and uncompress the tarball in a suitable directory. The
tarball includes the SqueezeMeta scripts as well as the ref:`third-party software <Vendored tools`
redistributed with SqueezeMeta. Note that, you may need to provide
additional dependencies, and potentially recompile some 
binaries from source in order for the manual install to work.
The conda method is now the recommended way to install SqueezeMeta,
and we will not prioritize support to issues regarding manual installation.

The ``test_install.pl`` script can be run in order to check whether the
required dependencies are available in your environment.

.. code-block:: console

    /path/to/SqueezeMeta/utils/install_utils/test_install.pl

Downloading or building databases
=================================

SqueezeMeta uses several databases. GenBank nr for taxonomic assignment,
and eggnog, KEGG and Pfam for functional assignment. The script
*download_databases.pl* can be run to download a pre-formatted version
of all the databases required by SqueezeMeta.

.. code-block:: console
   
   /path/to/SqueezeMeta/utils/install_utils/download_databases.pl /download/path

, where ``/download/path`` is the destination folder. This is the
recommended option, but the files are hosted in our institutional
server, which can at times be unreachable.

Alternatively, the script ``make_databases.pl`` can be run to download
from source and format the latest version of the databases.

.. code-block:: console

   /path/to/SqueezeMeta/utils/install_utils/make_databases.pl /download/path

Generally, ``download_databases.pl`` is the safest choice for getting
your databases set up. When running ``make_databases.pl``, data download
(e.g. from the NCBI server) can be interrupted, leading to a corrupted
database. Always run ``test_install.pl`` to check that the database was
properly created. Otherwise, you can try re-running
``make_databases.pl``, or just run ``download_databases.pl`` instead.

The databases occupy 470Gb, but we recommend having at least 700Gb free
disk space during the building process.

Two directories will be generated after running either
``make_databases.pl`` or ``download_databases.pl``.

- ``/download/path/db``, which contains the actua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l databases.
- ``/download/path/test``, which contains data for a test run of SqueezeMeta.

If the SqueezeMeta databases are already built in another location in
the system, a different copy of SqueezeMeta can be configured to use
them with

.. code-block:: console

   /path/to/SqueezeMeta/utils/install_utils/configure_nodb.pl /path/to/db

, where ``/path/to/db`` is the route to the ``db`` folder that was
generated by either ``make_databases.pl`` or ``download_databases.pl``.

After configuring the databases, the ``test_install.pl`` can be run in
order to check that SqueezeMeta is ready to work (see previous section).

Updating SqueezeMeta
====================

Assuming your databases are not inside the SqueezeMeta directory, just
remove it, download the new version and configure it with

.. code-block:: console

  /path/to/SqueezeMeta/utils/install_utils/configure_nodb.pl /path/to/db

.. _Vendored tools:
Vendored tools
==============

This is a list of all the tools redistributed with SqueezeMeta, and a brief description of the custom modifications (if any) that were applied to each tool.

We vendor third-party software since

- The pipeline is complex and we want to minimize the burden on our users. Initially, we aimed for SqueezeMeta to depend only on libraries that can be installed via standard packaging tools (apt, yum, etc). Now we are trying to simplify even more, by using conda to meet all dependencies
- Some tools require modifications (e.g. parametrized rather than hardcoded database locations) to work well within our pipeline.

Over time some of the vendored tools have been replaced by conda packages. This was a natural transition to make as most of our users were using conda for installing SqueezeMeta, and some vendored binaries had trouble running in different linux distributions/versions. However we still redistribute all the tools listed below, even if some of them are no longer used by default. 

The *External software* section of the ``SqueezeMeta/scripts/SqueezeMeta_conf.pl`` file controls all the software that is called by the pipeline. The executable called for each program is stored in a different variable. If no path to the executable is listed there, the exectuable will be assumed to be present in ``$PATH`` (e.g. because it is provided by a conda environment). For example:

- ``$spades_soft = "$installpath/bin/SPAdes/spades.py";`` will take the ``spades.py`` executable that we vendor with SqueezeMeta
- ``$spades_soft = "spades.py";`` will take whatever ``spades.py`` executable available in ``$PATH``

Note that some of these tools require additional software and libraries to be available via ``$PATH`` and ``$LD_LIBRARY_PATH``. This is also indicated in the ``SqueezeMeta_conf.pl`` file. Normally this will not be relevant when using versions from conda, since in that case all the dependencies should be in place when activating the environment.

So, in order to control which software is called by SqueezeMeta, modify the *External software* section of the ``SqueezeMeta/scripts/SqueezeMeta_conf.pl`` file.

SqueezeMeta redistributes the following third-party software. Note that, for compatibility versions, we now use conda to provide some of these. A given tool *should* be replaceable by its original version if has no custom patch listed, or has ONLY the "Work within the SQM directory structure" patch listed:

- `trimmomatic <http://www.usadellab.org/cms/?page=trimmomatic>`_

- `MEGAHIT <https://github.com/voutcn/megahit>`_

- `SPAdes <http://cab.spbu.ru/software/spades>`_

    - Work within the SQM directory structure

- `Canu <https://github.com/marbl/canu>`_

- `prinseq <http://prinseq.sourceforge.net>`_

- `kmer-db <https://github.com/refresh-bio/kmer-db>`_

- `CD-HIT <https://github.com/weizhongli/cdhit>`_

    - Recompile with MAX_SEQ=20000000

- `amos <http://www.cs.jhu.edu/~genomics/AMOS>`_

    - Work within the SQM directory structure
    - Add multithreading in nucmer calls (minimus2)
    - Add a custom minimus2 script for the SQM-seqmerge mode

- `mummer <https://github.com/mummer4/mummer>`_

- `hmmer <http://hmmer.org/>`_

- `barrnap <https://github.com/tseemann/barrnap>`_

    - Work within the SQM directory structure
    - Add ``-dbdir`` as an additional command line argument

- `aragorn <http://130.235.244.92/ARAGORN/>`_

- `prodigal <https://github.com/hyattpd/Prodigal>`_

- `DIAMOND <https://github.com/bbuchfink/diamond>`_

- `bwa <https://github.com/lh3/bwa>`_

- `minimap2 <https://github.com/lh3/minimap2>`_

- `bowtie2 <http://bowtie-bio.sourceforge.net/bowtie2/index.shtml>`_

- `MaxBin <https://downloads.jbei.org/data/microbial_communities/MaxBin/MaxBin.html>`_

    - Work within the SQM directory structure
    - Add ``-markerpath`` as an additional command line argument

- `MetaBAT <https://bitbucket.org/berkeleylab/metabat>`_

- `CONCOCT <https://github.com/BinPro/CONCOCT>`_

    - Fix an error in transform.py with newer version of scikit-kearn

- `DAS Tool https://github.com/cmks/DAS_Tool>`_

    - Add extra logging, remove some superfluous error messages
    - Explicitly load `library(methods)` in DAS_Tool.R since Rscript does not load it on startup (even if R console does)

- `checkm <http://ecogenomics.github.io/CheckM>`_

    - Work within the SQM directory structure
    - Port to python3

- `checkm2 <https://github.com/chklovski/CheckM2>`_

    - Work within the SQM directory structure
    - Work with newer versions of pandas, scikit-learn

- `comparem <https://github.com/dparks1134/CompareM>`_

    - Work within the SQM directory structure
    - Port to python3

- `MinPath <http://omics.informatics.indiana.edu/MinPath>`_

    - Work within the SQM directory structure
    - Port to python3

- `RDP classifier <https://github.com/rdpstaff/classifier>`_

- `pullseq <https://github.com/bcthomas/pullseq>`_

- `Short-Pair <https://sourceforge.net/projects/short-pair/>`_

    - Work within the SQM directory structure
    - Port to python3

- `SAMtools <http://samtools.sourceforge.net/>`_

- `Mothur <https://mothur.org/>`_

- `Flye <https://github.com/fenderglass/Flye>`_

- `POGENOM <https://github.com/EnvGen/POGENOM>`_

    - Only includes the pogenom.pl script, without modifications

